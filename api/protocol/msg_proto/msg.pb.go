// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

package msg_proto

import (
	fmt "fmt"
	types_pb "github.com/amazechain/amc/api/protocol/types_pb"
	github_com_amazechain_amc_common_types "github.com/amazechain/amc/common/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageData struct {
	ClientVersion        string   `protobuf:"bytes,2,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	NodeID               string   `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NodePubKey           []byte   `protobuf:"bytes,6,opt,name=nodePubKey,proto3" json:"nodePubKey,omitempty"`
	Sign                 []byte   `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	Payload              []byte   `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
	Gossip               bool     `protobuf:"varint,9,opt,name=gossip,proto3" json:"gossip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageData) Reset()         { *m = MessageData{} }
func (m *MessageData) String() string { return proto.CompactTextString(m) }
func (*MessageData) ProtoMessage()    {}
func (*MessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}
func (m *MessageData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageData.Unmarshal(m, b)
}
func (m *MessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageData.Marshal(b, m, deterministic)
}
func (m *MessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageData.Merge(m, src)
}
func (m *MessageData) XXX_Size() int {
	return xxx_messageInfo_MessageData.Size(m)
}
func (m *MessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageData.DiscardUnknown(m)
}

var xxx_messageInfo_MessageData proto.InternalMessageInfo

func (m *MessageData) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *MessageData) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MessageData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MessageData) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *MessageData) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

func (m *MessageData) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *MessageData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MessageData) GetGossip() bool {
	if m != nil {
		return m.Gossip
	}
	return false
}

type NewBlockMessageData struct {
	Hash                 github_com_amazechain_amc_common_types.Hash   `protobuf:"bytes,1,opt,name=hash,proto3,customtype=github.com/amazechain/amc/common/types.Hash" json:"hash"`
	Number               github_com_amazechain_amc_common_types.Int256 `protobuf:"bytes,2,opt,name=Number,proto3,customtype=github.com/amazechain/amc/common/types.Int256" json:"Number"`
	Block                *types_pb.PBlock                              `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *NewBlockMessageData) Reset()         { *m = NewBlockMessageData{} }
func (m *NewBlockMessageData) String() string { return proto.CompactTextString(m) }
func (*NewBlockMessageData) ProtoMessage()    {}
func (*NewBlockMessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{1}
}
func (m *NewBlockMessageData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewBlockMessageData.Unmarshal(m, b)
}
func (m *NewBlockMessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewBlockMessageData.Marshal(b, m, deterministic)
}
func (m *NewBlockMessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBlockMessageData.Merge(m, src)
}
func (m *NewBlockMessageData) XXX_Size() int {
	return xxx_messageInfo_NewBlockMessageData.Size(m)
}
func (m *NewBlockMessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBlockMessageData.DiscardUnknown(m)
}

var xxx_messageInfo_NewBlockMessageData proto.InternalMessageInfo

func (m *NewBlockMessageData) GetBlock() *types_pb.PBlock {
	if m != nil {
		return m.Block
	}
	return nil
}

type ProtocolHandshakeMessage struct {
	Version              string                                        `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	GenesisHash          string                                        `protobuf:"bytes,2,opt,name=genesisHash,proto3" json:"genesisHash,omitempty"`
	CurrentHeight        github_com_amazechain_amc_common_types.Int256 `protobuf:"bytes,3,opt,name=currentHeight,proto3,customtype=github.com/amazechain/amc/common/types.Int256" json:"currentHeight"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *ProtocolHandshakeMessage) Reset()         { *m = ProtocolHandshakeMessage{} }
func (m *ProtocolHandshakeMessage) String() string { return proto.CompactTextString(m) }
func (*ProtocolHandshakeMessage) ProtoMessage()    {}
func (*ProtocolHandshakeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{2}
}
func (m *ProtocolHandshakeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolHandshakeMessage.Unmarshal(m, b)
}
func (m *ProtocolHandshakeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolHandshakeMessage.Marshal(b, m, deterministic)
}
func (m *ProtocolHandshakeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolHandshakeMessage.Merge(m, src)
}
func (m *ProtocolHandshakeMessage) XXX_Size() int {
	return xxx_messageInfo_ProtocolHandshakeMessage.Size(m)
}
func (m *ProtocolHandshakeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolHandshakeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolHandshakeMessage proto.InternalMessageInfo

func (m *ProtocolHandshakeMessage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ProtocolHandshakeMessage) GetGenesisHash() string {
	if m != nil {
		return m.GenesisHash
	}
	return ""
}

func init() {
	proto.RegisterType((*MessageData)(nil), "msg_proto.MessageData")
	proto.RegisterType((*NewBlockMessageData)(nil), "msg_proto.NewBlockMessageData")
	proto.RegisterType((*ProtocolHandshakeMessage)(nil), "msg_proto.ProtocolHandshakeMessage")
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899) }

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xdd, 0x6a, 0x14, 0x31,
	0x18, 0x35, 0xdb, 0xed, 0xb6, 0xfb, 0x6d, 0x2b, 0x12, 0x45, 0x82, 0x88, 0x1d, 0x16, 0x91, 0x05,
	0x71, 0x46, 0xb6, 0xd4, 0x07, 0x58, 0x0a, 0x6e, 0x91, 0x96, 0x65, 0x2e, 0xbc, 0xd0, 0x8b, 0x92,
	0x99, 0xf9, 0xc8, 0x84, 0x6e, 0x7e, 0x98, 0x64, 0x94, 0xf5, 0xb5, 0x7c, 0x09, 0x5f, 0xc0, 0x1b,
	0x2f, 0xea, 0xab, 0x48, 0xd2, 0x54, 0xb7, 0x17, 0x82, 0x78, 0x35, 0xe7, 0x3b, 0x21, 0x67, 0xbe,
	0x73, 0x4e, 0x60, 0xac, 0x9c, 0xc8, 0x6d, 0x67, 0xbc, 0xa1, 0x01, 0x5e, 0x46, 0xf8, 0xe4, 0x91,
	0xdf, 0x58, 0x74, 0x97, 0xb6, 0x2a, 0x22, 0xc8, 0x13, 0x2b, 0x8c, 0x30, 0x11, 0x16, 0x01, 0xdd,
	0xb0, 0xd3, 0x9f, 0x04, 0x26, 0xe7, 0xe8, 0x1c, 0x17, 0x78, 0xca, 0x3d, 0xa7, 0xcf, 0xe1, 0xb0,
	0x5e, 0x4b, 0xd4, 0xfe, 0x3d, 0x76, 0x4e, 0x1a, 0xcd, 0x06, 0x19, 0x99, 0x8d, 0xcb, 0xbb, 0x24,
	0x7d, 0x0a, 0x63, 0x2f, 0x15, 0x3a, 0xcf, 0x95, 0x65, 0x3b, 0x19, 0x99, 0xed, 0x94, 0x7f, 0x08,
	0x7a, 0x1f, 0x06, 0xb2, 0x61, 0xc3, 0x78, 0x71, 0x20, 0x1b, 0xfa, 0x18, 0x46, 0xda, 0x34, 0x78,
	0x76, 0xca, 0x76, 0x23, 0x97, 0x26, 0xfa, 0x0c, 0x20, 0xa0, 0x55, 0x5f, 0xbd, 0xc3, 0x0d, 0x1b,
	0x65, 0x64, 0x76, 0x50, 0x6e, 0x31, 0x94, 0xc2, 0xd0, 0x49, 0xa1, 0xd9, 0x5e, 0x3c, 0x89, 0x98,
	0x32, 0xd8, 0xb3, 0x7c, 0xb3, 0x36, 0xbc, 0x61, 0xfb, 0x91, 0xbe, 0x1d, 0xc3, 0x5f, 0x84, 0x71,
	0x4e, 0x5a, 0x36, 0xce, 0xc8, 0x6c, 0xbf, 0x4c, 0xd3, 0xf4, 0x3b, 0x81, 0x87, 0x17, 0xf8, 0x79,
	0xb1, 0x36, 0xf5, 0xd5, 0xb6, 0xd3, 0xb7, 0x30, 0x6c, 0xb9, 0x6b, 0x19, 0x09, 0x32, 0x8b, 0xe3,
	0x6f, 0xd7, 0x47, 0xf7, 0x7e, 0x5c, 0x1f, 0xbd, 0x14, 0xd2, 0xb7, 0x7d, 0x95, 0xd7, 0x46, 0x15,
	0x5c, 0xf1, 0x2f, 0x58, 0xb7, 0x5c, 0xea, 0x82, 0xab, 0xba, 0xa8, 0x8d, 0x52, 0x46, 0xa7, 0x4c,
	0x97, 0xdc, 0xb5, 0x65, 0x14, 0xa0, 0xe7, 0x30, 0xba, 0xe8, 0x55, 0x85, 0x5d, 0xcc, 0xea, 0x60,
	0x71, 0x92, 0xa4, 0x5e, 0xfd, 0xa3, 0xd4, 0x99, 0xf6, 0xf3, 0x93, 0x37, 0x65, 0x12, 0xa1, 0x2f,
	0x60, 0xb7, 0x0a, 0xbb, 0xc6, 0x5c, 0x27, 0xf3, 0x07, 0x79, 0x2a, 0xb1, 0xca, 0x57, 0xd1, 0x43,
	0x79, 0x73, 0x3c, 0xfd, 0x4a, 0x80, 0xad, 0x42, 0x87, 0xb5, 0x59, 0x2f, 0xb9, 0x6e, 0x5c, 0xcb,
	0xaf, 0x30, 0x19, 0x0c, 0x31, 0x7d, 0x4a, 0x05, 0x92, 0x98, 0xf9, 0xed, 0x48, 0x33, 0x98, 0x08,
	0xd4, 0xe8, 0xa4, 0x0b, 0x16, 0x52, 0xbd, 0xdb, 0x14, 0xfd, 0x08, 0x87, 0x75, 0xdf, 0x75, 0xa8,
	0xfd, 0x12, 0xa5, 0x68, 0x7d, 0x5c, 0xe4, 0xbf, 0x6d, 0xdd, 0xd5, 0x5a, 0xcc, 0x3f, 0xbc, 0xfe,
	0xfb, 0x7d, 0x6e, 0x65, 0x61, 0x93, 0xa5, 0xe2, 0xf7, 0x7b, 0xae, 0x46, 0xf1, 0x73, 0xfc, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0xaf, 0xa1, 0xc3, 0x38, 0xee, 0x02, 0x00, 0x00,
}
